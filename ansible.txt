用Ansible准备开发环境

我一直以来对CFEngine，Puppet之类的工具持怀疑态度，倒不是因为这些不好用，
而是总感觉需要agent的模式不太对劲。手动管理配置的时候，往往会陷入如何
去改变的思维方式。特别是有很多所谓的配置指南，往往就只写有几步，每一步
分别改什么，并不直白的告诉你，这么改是为了什么。而使用配置管理工具，始
终是以要达到什么样的状态为出发点的。因为更改配置的过程中，可能因为各种
各样的原因被中断。比如机器重启了，因为重启之前可能还没有配置好，也可能
已经配置好了。所以你的脚本必须要保证可以重复运行。不管修改配置的过程中，
发生了什么不确定的事件，你不断运行你的脚本，直到看到运行成功了，那就会
达到预先确定的状态。配置管理是为了消除不确定，达成确定。需要agent的模
式却与此背道而驰。当你更新好了master上的配置，至于agent什么时候会去应
用这些配置，完全是由agent说了算。尽管可以有推送机制去通知agent，但
agent始终需要定时去拉取配置的，不然agent重启的时候错过了通知，配置就不
会变了。你还得重新发明重试机制，不然你连两个简单的问题都回答不了，所有
机器上的配置我们能确定现在都改好了？如果不能确定，现在该怎么办？

Ansible为代表的这一代配置管理工具，最大的优点就是不需要agent。因为没有
agent，自然也不需要有master了。所有操作都是通过SSH进行的。极大的减低了
维护成本。因为采用agent模式，还有一个鸡生蛋，蛋生鸡的问题，agent是怎么
装上去的，agent本身的配置又是怎么管理的？开发环境也面临和配置管理类似
的问题，比如安装依赖的包，会因为网络原因连不上镜像，导致安装失败。准备
开发环境的脚本，需要在网络恢复之后，能重新运行。也需要等数据库起来之后，
再运行migration。正是因为不需要agent，我们也可以用Ansible来准备开发环
境，刚好Ansible还提供了本地模式。

Ansible有playbook_dir变量可以用来获得当前playbook所在的目录。通常的配
置管理都是绝对路径。对于开发环境来说，路径都是相对于这个目录的。因为不
同的项目可能会监听相同的端口，还需要有tag能保证所有起来的进程都退出了。
这样就带来一个区别，每次运行playbook，一定要指定运行某一个tag。相比写
bash脚本，写起来更容易，且更容易看懂了。
